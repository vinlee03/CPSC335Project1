Algorithm 1 Work:

Step 1) Visualizing the problem.

total seats = 2n

for now assume n = 10 (arbitrary value to make math easier)


total seats = 20


The seat layout according to algorithm 1 (every seat number == row[i] number. row[0] == 0, row[1]==1 etc)
[0,1][2,3][4,5][6,7][8,9][10,11][12,13][14,15][16,17][18,19]
n=1   n=2  n=3  n=4  n=5   n=6    n=7    n=8    n=9    n=10


Step 2) Calculate last couple using given algorithm

Last couple = [2n - 2, 2n -1]

if n = 10

Last couple = [20-2, 20-1]

Last couple = [18, 19]


Step 3) Understand the swap algorithm

Goal: Minimum Number of swaps needed so that all couples sit next to each other



Sample Input:

row [0,2,1,3]

output: 1 //Only row[1] needs to be swapped with row[2] and the result is [0,1,2,3]


This is just a selection sort algorithm



Step 4) Writing the swap algorithm


def in_place_selection_sort(U):
<unsorted zone> = u
<sorted zone> = empty
<swap_counter> = 0
while <unsorted zone> is not empty:
least_index = <index of smallest element in unsorted zone>
<swap u[least_index] to the end of the unsorted zone>
<remove the least element from the unsorted zone>
<add the least element to the sorted zone>
<swap_counter> = swap_counter + 1
return <swap_counter>










